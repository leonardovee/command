// Code generated by MockGen. DO NOT EDIT.
// Source: command.go
//
// Generated by this command:
//
//	mockgen -source=command.go -destination=command_mock.go -package=command
//

// Package command is a generated GoMock package.
package command

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
	isgomock struct{}
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// GetId mocks base method.
func (m *MockCommand) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockCommandMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockCommand)(nil).GetId))
}

// GetName mocks base method.
func (m *MockCommand) GetName() CommandType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(CommandType)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockCommandMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockCommand)(nil).GetName))
}

// MockCommandHandler is a mock of CommandHandler interface.
type MockCommandHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCommandHandlerMockRecorder
	isgomock struct{}
}

// MockCommandHandlerMockRecorder is the mock recorder for MockCommandHandler.
type MockCommandHandlerMockRecorder struct {
	mock *MockCommandHandler
}

// NewMockCommandHandler creates a new mock instance.
func NewMockCommandHandler(ctrl *gomock.Controller) *MockCommandHandler {
	mock := &MockCommandHandler{ctrl: ctrl}
	mock.recorder = &MockCommandHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandHandler) EXPECT() *MockCommandHandlerMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockCommandHandler) GetName() CommandType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(CommandType)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockCommandHandlerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockCommandHandler)(nil).GetName))
}

// Handle mocks base method.
func (m *MockCommandHandler) Handle(command Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockCommandHandlerMockRecorder) Handle(command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCommandHandler)(nil).Handle), command)
}

// MockDispatcheable is a mock of Dispatcheable interface.
type MockDispatcheable struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcheableMockRecorder
	isgomock struct{}
}

// MockDispatcheableMockRecorder is the mock recorder for MockDispatcheable.
type MockDispatcheableMockRecorder struct {
	mock *MockDispatcheable
}

// NewMockDispatcheable creates a new mock instance.
func NewMockDispatcheable(ctrl *gomock.Controller) *MockDispatcheable {
	mock := &MockDispatcheable{ctrl: ctrl}
	mock.recorder = &MockDispatcheableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDispatcheable) EXPECT() *MockDispatcheableMockRecorder {
	return m.recorder
}

// Dispatch mocks base method.
func (m *MockDispatcheable) Dispatch(command Command) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", command)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockDispatcheableMockRecorder) Dispatch(command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockDispatcheable)(nil).Dispatch), command)
}
